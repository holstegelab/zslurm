#!/usr/bin/env python
import zslurm_shared
import argparse
import os
import socket
try: 
    import http.client as httplib
except:
    import httplib
import sys
import shlex
import time

parser = argparse.ArgumentParser(description='Submit XSlurm job')

parser.add_argument('-c','--cpus-per-task',type=float, default=1, help='Advise the Slurm controller that ensuing job steps will require ncpus number of processors per task. Without this option, the controller will just try to allocate one processor per task.')
parser.add_argument('--mem',type=float, default=1024, help='Specify the real memory required per node in MegaBytes. Default value is 1024.') # in mb
parser.add_argument('-t','--time', default='0:1:0', help='Advise on total run time of the job allocation. Used by scheduler to prevent scheduling on nodes that will run out of time before job completion. Acceptable time formats include "minutes", "minutes:seconds", "hours:minutes:seconds", "days-hours", "days-hours:minutes" and "days-hours:minutes:seconds".') #mintues #minutes:sconds #hours:mintues:seconds #days-[time]
parser.add_argument('-p','--partition', default='compute', help='Either compute or archive') # not used
parser.add_argument('-q', '--qos', default='none', help='Included for SLURM compatibility, not used') # not used
parser.add_argument('--requeue', action='store_true', help='Specifies that the batch job should eligible to being requeue. The job may be requeued after node failure. When a job is requeued, the batch script is initiated from its beginning.')
parser.add_argument('-n', '--ntasks',type=float, default=1, help='Number of tasks to run') 

parser.add_argument('-d', '--dependency', default=None, help='Defer the start of this job until the specified dependencies have been satisfied completed. Param is of the form <type:job_id[:job_id][,type:job_id[:job_id]]> or <type:job_id[:job_id][?type:job_id[:job_id]]>, with type equal to after, afterany, afternotok, afterok, expand or singleton. All dependencies must be satifisied if the "," separtor used, any dependencies if the "?" separator is used.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton
parser.add_argument('-J', '--job-name', default=None, help='Specify a name for the job allocation. The specified name will appear along with the job id number when querying running jobs on the system. The default is the name of the batch script, or just "zsbatch" if the script is read on zsbatch''s standard input.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton
parser.add_argument('--arch-use-add', type=float, default=0.0, help='Archive usage added by this job.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton
parser.add_argument('--arch-use-remove', type=float, default=0.0, help='Archive usage removed by this job.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton
parser.add_argument('--dcache-use-add', type=float, default=0.0, help='DCache usage added by this job.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton
parser.add_argument('--dcache-use-remove', type=float, default=0.0, help='DCache usage removed by this job.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton
parser.add_argument('--active-use-add', type=float, default=0.0, help='Active usage added by this job.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton
parser.add_argument('--active-use-remove', type=float, default=0.0, help='Active usage removed by this job.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton
parser.add_argument('--parsable', action='store_true', help='Outputs only the jobid and cluster name (if present), separated by semicolon, only on successful submission.')
parser.add_argument('--limit-threads', type=float, default=-1, help='Changes environment to limit thread creation by OMP/OPENBLAS/MKL/VECLIB/NUMEXPR to a max value (default:-1 (disabled))')

parser.add_argument('job_args', nargs='*')
args = parser.parse_args()

s = zslurm_shared.TimeoutServerProxy(zslurm_shared.get_job_url(), allow_none = True)

cwd = os.getcwd()
env = dict(os.environ)

if args.limit_threads >= 1:
    t = str(int(args.limit_threads))
    env["OMP_NUM_THREADS"] = t
    env["OPENBLAS_NUM_THREADS"] = t
    env["MKL_NUM_THREADS"] = t
    env["VECLIB_MAXIMUM_THREADS"] = t
    env["NUMEXPR_NUM_THREADS"] = t

#parse time format
try:
    atime = args.time.split('-')

    if len(atime) == 2:
        days = int(atime[0])
        atime = atime[1]
    elif len(atime) == 1:
        days = 0
        atime = atime[0]
    else:
        raise RuntimeError
    
    atime = atime.split(':')
    if len(atime) == 3:
        hours = int(atime[0])
        atime = atime[1:]
    else:
        hours = 0

    minutes = int(atime[0])
    if len(atime) == 2:
        seconds = int(atime[1])
    elif len(atime) == 1:
        seconds = 0
    else:
        raise RuntimeError
    
    reqtime = days * 24 * 60 + hours * 60 + minutes + (seconds > 0)

except: 
    print('zsbatch: error: Incorrect time format: %s' % args.time)
    raise

job_name = args.job_name

job_args = args.job_args

if not job_args:
    job_args = shlex.split(sys.stdin.readline())
    if job_name is None:
        job_name = 'zsbatch'
    
        

if not job_args:
    print('zsbatch: error: No command given on input')
    sys.exit(1)


cmd = " ".join(job_args) # default

if os.path.exists(job_args[0]): #executes file
    if not os.access(args.job_args[0], os.X_OK): #executes non-executable file: search for interpreter
        f = open(args.job_args[0],'r')
        firstline = f.readline()
        f.close()
        if not firstline.startswith('#!'):
            print('zsbatch: error: This does not look like a bash script. The first line must start with #! followed by the path to an interpreter. For instance #!/bin/sh')
            sys.exit(1)
        interpreter = firstline[2:]
        cmd = interpreter + " "  + " ".join(job_args)

if job_name is None:
    job_name = os.path.basename(job_args[0])

attempt = 4
while attempt > 0 :
    try:
        for i in range(int(args.ntasks)):
            jobid = s.submit_job(job_name, cmd, cwd, env, args.cpus_per_task, args.mem, reqtime, args.requeue, args.dependency, args.arch_use_add, args.arch_use_remove, args.dcache_use_add, args.dcache_use_remove, args.active_use_add, args.active_use_remove, args.partition)
            if args.parsable:
                print(jobid)
            else:
                print('Submitted batch job ' + jobid)
        sys.exit(0)
    except (socket.error, httplib.HTTPException) as serror:
        attempt -= 1
        time.sleep(15)

print('zsbatch: error: Job submission failed, could not connect to XSlurm manager on ' + zslurm_shared.job_url)
sys.exit(1)
